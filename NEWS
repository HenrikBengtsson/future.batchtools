Package: future.batchtools
==========================

Version: 0.3.0-9000 [2017-04-18]

NEW FEATURES:

 o Added batchtools_custom() for specifying batchtools futures using any
   type of batchtools cluster functions.
   
 o batchtools_template(pathname = NULL, type = <type>) now relies on the
   batchtools package for locating the <type> template file.
   
 o nbrOfWorkers() for batchtools future now defaults to +Inf unless the
   evaluator's 'workers' or 'cluster.functions' arguments specify something
   else.

 o Renamed argument 'pathname' to 'template' for batchtools_<tmpl>() functions.

SOFTWARE QUALITY:

 o Testing future_lapply() for batchtools backends.

BUG FIXES:
   
 o Under plan(batchjobs_*), when being created futures would produce an error
   on "all(is.finite(workers)) is not TRUE" due to an outdated sanity check.
   
 
Version: 0.3.0 [2017-03-19]

NEW FEATURES:

 o The number of jobs one can add to the queues of HPC schedulers is in
   principle unlimited, which is why the number of available workers for
   such batchtools_* backends is reported as +Inf.  However, as the number
   of workers is used by future_lapply() to decide how many futures should
   be used to best partition the elements, this means that future_lapply()
   will always use one future per element.  Because of this, it is now
   possible to specify plan(batchtools_*, workers = n) where 'n' is the
   target number of workers.


Version: 0.2.0 [2017-02-23]

GLOBALS:

 o batchtools (>= 0.9.2) now supports exporting objects with
   any type of names (previously only possible if they mapped to
   to strictly valid filenames).  This allowed me to avoid lots of
   internal workaround code encoding and decoding globals.
   

Version: 0.1.0 [2017-02-11]

 o Package created by porting the code of future.BatchJobs.
   This version passes 'R CMD check --as-cran' with all OK
   after a minimial amount of adjustments to the ported code.
