debug(future:::objectSize.nested)
as.list(.scannedEnvs)
as.list(.scannedEnvs)
str(as.list(.scannedEnvs))
str(as.list(.scannedEnvs))
str(as.list(.scannedEnvs))
str(as.list(.scannedEnvs))
str(as.list(.scannedEnvs))
str(as.list(.scannedEnvs))
.scannedEnv
.scannedEnvs
.scannedEnvs
.scannedEnvs
length(.scannedEnvs)
names(.scannedEnvs)
.scannedEnvs$env_0
.scannedEnvs$env_1
names(.scannedEnvs)
names(.scannedEnvs)
names(.scannedEnvs)
names(.scannedEnvs)
names(.scannedEnvs)
str(x)
str(x)
c
c
c
c
undebug(future:::objectSize.nested)
c
objectSize(1:10)
objectSize(list(a=1:10, b=2:3))
objectSize(list(a=1:10, b=2:3, env=env))
env <- new.env(); env$a <- 1
objectSize(list(a=1:10, b=2:3, env=env))
env <- new.env(); env$a <- 1; env$b <- env
objectSize(list(a=1:10, b=2:3, env=env))
source("tests/globals,manual.R", chdir = TRUE, echo = TRUE)
tracebacK()
traceback()
source("tests/globals,manual.R", chdir = TRUE, echo = TRUE)
traceback()
source("tests/globals,manual.R", chdir = TRUE, echo = TRUE)
source("tests/globals,manual.R", chdir = TRUE, echo = TRUE)
seq_aling(list(1:2)))
seq_along(list(1:2)))
seq_along(list(1:2))
seq_along(list(1:2))
source("tests/globals,manual.R", chdir = TRUE, echo = TRUE)
source("tests/globals,manual.R", chdir = TRUE, echo = TRUE)
#source("tests/globals,manual.R", chdir = TRUE, echo = TRUE)
source("tests/globals,manual.R", chdir = TRUE, echo = TRUE)
str(getRversion())
packageVersion("future")
packageVersion("future")[[1]]
.subset2(packageVersion("future"), 1)
source("tests/globals,manual.R", chdir = TRUE, echo = TRUE)
source("tests/globals,manual.R", chdir = TRUE, echo = TRUE)
x <- packageVersion("future")
x[[1]]
x[[1]] == x
source("tests/globals,manual.R", chdir = TRUE, echo = TRUE)
packageVersion("startup")_
packageVersion("startup")
update.packages(ask=F)
source("tests/batchjobs_local.R", chdir = TRUE, echo = TRUE)
dbAddData
BatchJobs:::dbAddData
BatchJobs::dbAddData
debug(BatchJobs:::dbAddData)
sessionInfo()
RSQLite::dbGetPreparedQuery
source("tests/001.assert-backend.R", chdir = TRUE, echo = TRUE)
traceback()
list2env
globals:::c.Globals
batchExport
c <- Globals(a=1)
library(globals)
c <- Globals(a=1)
c <- Globals(a=1, b=2)
c
str(c)
c$a
c <- Globals(list(a=1, b=2))
li <- as.Globals(list(a=1, b=2))
str(li)
c(li, list())
traceback()
c(li, li)
c(li, list())
c(li, NULL)
c(li, list(a=1))
library("globals")
g <- as.Globals(list(a=1, b=2))
c(g, list())
packageVersion("BatchJobs")
library("future.BatchJobs")
plan(batchjobs_local)
x %<-% 1
x
x %<-% { 2 * a }
a <- 1
x %<-% { 2 * a }
sessionInfo()
x %<-% { 2 * a }
traceback()
library(globals)
c(Globals(), list())
library("future.BatchJobs")
a <- 1
x %<-% { a + 1 }
x
install.packages('globals")
install.packages('globals')
library("future.BatchJobs")
library("future.BatchJobs"); plan(batchjobs_local);
x %<-% { a + 1 }
x
a <- 1
x %<-% { a + 1 }
install.packages("globals")
packageDescription("globals")
install.packages("globals")
forturnes::fortune(364)
fortunes::fortune(364)
traceback()
sessionInfo()
fortunes::fortune(364)
sessionInfo()
packageVersion("globals")
library("future.BatchJobs"); plan(batchjobs_local);
x %<-% { a + 1 }
a <- 1
library("future.BatchJobs"); plan(batchjobs_local);
a <- 1
x %<-% { a + 1 }
traceback()
library(globals)
g <- as.Globals(list(a=1))
str(g)
as.list(g)
unclass(g)
attributes(g) <- NULL
str(g)
library("future.BatchJobs"); plan(batchjobs_local);
a <- 1
x %<-% { a + 1 }
x
packageVersion("BatchJobs")
source("tests/future,labels.R", chdir = TRUE, echo = TRUE)
f$label
label
plan()
f <- future(1, label = "foo")
f$label
f <- (x %<-% { 1 } %label% = "foo"
f <- (x %<-% { 1 } %label% "foo"
f <- (x %<-% { 1 } %label% "foo")
f$label
f <- (x %<-% { 1 } %label% "bar")
f$label
f
source("tests/future,labels.R", chdir = TRUE, echo = TRUE)
f <- future(1, label = NULL)
f$label
x <- list()
x["a"] <- list(2)
x
library("future")
library("future.BatchJobs")
str(f)
f
fb <- batchjobs_local(1)
fa <- eager(1)
fa
fb
print.Future
future:::print.Future
source("R/BatchJobsFuture-class.R")
fb
library("future.BatchJobs")
fb <- batchjobs_local(1)
fb
library("future.BatchJobs")
db
fb
value(fb)
fb
library("future.BatchJobs"); fb <- batchjobs_local(1)
fb
library("future.BatchJobs"); fb <- batchjobs_local(1)
library("future.BatchJobs"); fb <- batchjobs_local(1); fb
library("future.BatchJobs"); fb <- batchjobs_local(1); fb
value(fb)
fb
tools:::.news_reader_default("NEWS")
tools:::.news_reader_default("NEWS")
news()
tools:::.news_reader_default("NEWS")
tools:::.news_reader_default("NEWS")
str(tools:::.news_reader_default("NEWS"))
tools:::.news_reader_default("NEWS")
devtools::spell_check()
news(package="future.BatchJobs")
news(package="future.BatchJobs")
verB <- packageVersion("BatchJobs")
verB
    warning(sprintf("future.BatchJobs requires globals (>= 0.7.2) when using BatchJobs %s.  Please update the globals package.", verB))
library(future.BatchJobs)
install.packages("https://cran.r-project.org/src/contrib/Archive/globals/globals_0.7.1.tar.gz")
library(future.BatchJobs)
library(future.BatchJobs)
packageVersion("globals")
packageVersion("BatchJobs")
(verB <- packageVersion("BatchJobs")) > "1.6"
packageVersion("globals") < "0.7.2"
future.BatchJobs:::.onLoad
library(future.BatchJobs)
packageVersion
packageVersion("globals")
update.packages()
packageVersion("BatchJobs")
source("tests/globals,tricky.R", chdir = TRUE, echo = TRUE)
future_lapply <- future:::flapply
future_lapply
source("tests/globals,tricky.R", chdir = TRUE, echo = TRUE)
backtrace()
history()
library("batchtools"); library("future.batchtools"); f <- batchtools_local(42)
suppressPackageMessages(library("batchtools")); library("future.batchtools"); f <- batchtools_local(42)
suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); f <- batchtools_local(42)
savehistory(); suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); f <- batchtools_local(42)
savehistory(); suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); f <- batchtools_local(42)
?submitJobs
savehistory(); suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); f <- batchtools_local(42)
f
value(f)
savehistory(); suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); f <- batchtools_interactive(42)
#savehistory(); suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); f <- batchtools_interactive(42)
  cf <- makeClusterFunctionsInteractive(external = FALSE)
cf
f <- BatchtoolsFuture(expr = 42, cluster.functions = cf)
value(f)
f
str(as.list(f))
f$value
value(f)
#f <- BatchtoolsFuture(expr = 42, cluster.functions = cf)
savehistory(); options(future.debug = TRUE); suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); f <- batchtools_interactive(42)
traceback()
debug(future.batchtools:::run.BatchtoolsFuture)
debug(future.batchtools::run.BatchtoolsFuture)
debug(future.batchtools:::run.BatchtoolsFuture)
savehistory(); options(future.debug = TRUE); suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); f <- batchtools_interactive(42)
jobid
c
savehistory(); options(future.debug = TRUE); suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); f <- batchtools_interactive(42)
f
value(f)
traceback()
resolved(f)
status(f)
removeRegistry
reg
?Registry
reg
savehistory(); options(future.debug = TRUE); suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); f <- batchtools_interactive(42)
value(f)
reg
f$reg
str(as.list(f))
f$config$reg
f$config$reg$file.dir
?removeDirectory
savehistory(); options(future.debug = TRUE); suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); f <- batchtools_interactive(42)
value(f)
savehistory(); options(future.debug = TRUE); suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); f <- batchtools_local(42)
f
value(f)
library("future.batchtools")
?future.batchtools
plan()
plan(batchtools_local)
demo(future.batchtools::mandelbrot)
batchExport
?batchExport
savehistory(); options(future.debug = TRUE); suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); f <- batchtools_local({ 2 * a }, globals = list(a = 42))
value(f)
savehistory(); options(future.debug = TRUE); suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); plan(batchjobs_local); f <- future({ 2 * a }, globals = list(a = 42))
savehistory(); options(future.debug = TRUE); suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); plan(batchtools_local); f <- future({ 2 * a }, globals = list(a = 42))
value(f)
demo("mandelbrot", package = "future.batchtools")
demo("mandelbrot", package = "future.batchtools")
option(future.delete=FALSE)
options(future.delete=FALSE)
demo("mandelbrot", package = "future.batchtools")
savehistory(); options(future.debug = TRUE); suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); plan(batchtools_local); f <- future({ 2 * a }, globals = list(a = 42))
value(f)
demo("mandelbrot", package = "future.batchtools")
savehistory(); options(future.debug = TRUE); suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); plan(batchtools_local); f <- future({ 2 * a }, globals = list(a = 42))
demo("mandelbrot", package = "future.batchtools")
savehistory(); options(future.debug = TRUE); suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); plan(batchtools_local); f <- future({ 2 * a }, globals = list(a = 42))
?makeClusterFunctionsLSF
file_test
?makeClusterFunctionsMulticore
savehistory(); options(future.debug = TRUE); suppressPackageStartupMessages(library("batchtools")); library("future.batchtools"); plan(batchtools_local); f <- future({ 2 * a }, globals = list(a = 42))
?makeClusterFunctionsMulticore
?makeClusterFunctionsMulticore
source("tests/batchtools_custom.R", chdir=T, echo=T)
source("tests/batchtools_interactive.R", chdir=T, echo=T)
install.packages("tracer")
library(batchtools)
?batchtools
library(batchtools)
?getStatus
reg <- batchtools::makeRegistry()
reg
sessionInfo()
savehistory(); library("future.batchtools")
savehistory(); library("future.batchtools"); reg <- future.batchtools::makeRegistry()
savehistory(); library("future.batchtools"); reg <- future.batchtools:::makeRegistry()
savehistory(); library("future.batchtools"); reg <- future.batchtools:::tempRegistry()
reg
class(reg)
str(reg)
reg$packages
reg$namespaces
reg$source
reg$load
reg$seed
reg$version
as.list(reg)
str(reg)
inherits(reg, "environment")
unclass(reg)
reg
as.list(reg)
as.environment(reg)
ls(envir = reg)
reg$cluster.functions
reg$default.resources
reg$tags
reg$status
reg$defs
reg$temp.dir
reg$resources
f <- BatchtoolsFuture({ 42 })
f
status(f)
reg$file.dir
getStatus
getStatus(reg)
getStatus(reg, 1L)
reg
f
getErrorMessages
getErrorMessages(reg)
getErrorMessages
?getErrorMessages
getLogFiles
future <- f
  expr <- getExpression(future)
expr
  reg <- future$config$reg
reg
  packages <- future$packages
packages
  globals <- future$globals
globals
future.batchtools:::geval
geval <- future.batchtools:::geval
  jobid <- batchMap(fun = geval, list(expr), more.args = list(substitute = TRUE), reg = reg)
library(batchtools)
  jobid <- batchMap(fun = geval, list(expr), more.args = list(substitute = TRUE), reg = reg)
jobid
reg
  future$config$jobid <- jobid
future
getStatus(reg)
getStatus(reg=reg)
getStatus(reg=reg, ids=1L)
getStatus(reg=reg, ids=2L)
getStatus(reg=reg, ids=1L)
  conf <- future$conf
conf
    cluster.functions <- future$config$cluster.functions
cluster.finctions
cluster.functions
getClusterFunctions()
ls(envir = reg)
reg$cluster.functions
 makebatchtoolsConf
?batchtools
findConfFile
batchtools:::findConfFile
makeRegistry
setSystemConf
batchtools:::setSystemConf
batchtools:::tempdir
reg$cluster.functions
batchtools::submitJobs
savehistory(); library("future.batchtools"); f <- BatchtoolsFuture(42)
f
run(f)
f
run(f)
savehistory(); options(future.debug=TRUE); library("future.batchtools"); f <- BatchtoolsFuture(42)
run(f)
savehistory(); options(future.debug=TRUE); library("future.batchtools"); f <- BatchtoolsFuture(42)
run(f)
f2 <- run(f)
f$state
debug(run.BatchtoolsFuture)
debug(future.batchtools:::run.BatchtoolsFuture)
f2 <- run(f)
run
class(f)
future.batchtools:::run.BatchtoolsFuture(f)
future.batchtools:::run.BatchtoolsFuture(f)
reg
f$config$reg
clearRegistry(f$config$reg)
batchtools:::clearRegistry(f$config$reg)
future.batchtools:::run.BatchtoolsFuture(f)
jobid
reg
ls(envir = reg)
reg$cluster.function
reg[["cluster.function"]]
reg[["cluster.functions"]]
c
savehistory(); options(future.debug=TRUE); library("future.batchtools"); f <- BatchtoolsFuture(42)
future.batchtools:::run.BatchtoolsFuture(f)
savehistory(); options(future.debug=TRUE); library("future.batchtools"); f <- BatchtoolsFuture(42)
f2 <- future.batchtools:::run.BatchtoolsFuture(f)
f2
f
run(f)
batchtools:::clearRegistry(f$config$reg)
run(f)
savehistory(); options(future.debug=TRUE); library("future.batchtools"); f <- BatchtoolsFuture(42)
run(f)
f
f2 <- future.batchtools:::run.BatchtoolsFuture(f)
f
run
savehistory(); options(future.debug=TRUE); library("future.batchtools"); f <- BatchtoolsFuture(42)
run(f)
f
methods("run")
savehistory(); options(future.debug=TRUE); library("future.batchtools"); f <- BatchtoolsFuture(42)
run(f)
f
f <- future.batchtools:::run.BatchtoolsFuture(f)
f
status(f)
reg <- f$config$reg
reg
loadResult(reg)
library("batchtools")
loadResult(reg)
loadResult(reg, ids=1)
loadResult(reg, id=1)
future.batchtools::await(f)
future.batchtools:::await(f)
dir("/home/hb/repositories/future.batchtools/.future/")
dir("/home/hb/repositories/future.batchtools/.future/20170207_233403-CbPyRE"
)
dir("/home/hb/repositories/future.batchtools/.future/20170207_233403-CbPyRE")
value(f)
future.batchtools::await(f)
savehistory(); options(future.debug=TRUE); library("future.batchtools"); f <- BatchtoolsFuture(42)
value(f)
value(f)
savehistory(); options(future.debug=TRUE); library("future.batchtools"); f <- batchtools_interactive(42)
value(f)
plan(batchtools_interactive)
x %<-% 22
x
plan(batchtools_local)
x %<-% 23
x
plan(batchtools_multicore)
f <- future(42)
f
value(f)
makeClusterFunctionsMulticore
?makeClusterFunctionsMulticore
savehistory(); library("future.batchtools");
plan(batchtools_interactive)
y <- future_lapply(1:5, FUN = function(i) i^2)
y
plan(batchtools_multicore)
y <- future_lapply(1:5, FUN = function(i) i^2)
y
y <- future_lapply(1:10, FUN = function(i) Sys.getpid())
y
f <- future(32)
Sys.getpid()
nbrOfWorkers()
y <- future_lapply(1:10, FUN = function(i) { Sys.sleep(3); Sys.getpid() })
y <- future_lapply(1:3, FUN = function(i) { Sys.sleep(3); Sys.getpid() })
y
f <- future(42)
f$config$reg
Sys.getpid()
devtools::install()
batchtools:::clearRegistry
batchtools::removeRegistry
source("tests/BatchtoolsFuture.R", chdir = TRUE, echo = TRUE)
ll /home/hb/repositories/_R-3.3.2/future.batchtools.Rcheck/tests/.future/20170210_162306-esr6IM/batchtools_649361131
